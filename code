install.packages("rgdal")
install.packages("gstat")
install.packages("sp")
install.packages("spatstat")
install.packages("maptools")
install.packages("raster")
install.packages("tmap")
install.packages("GISTools")
install.packages("spdep")
install.packages("dplyr")
install.packages("spgwr")

library("rgdal")
library("gstat")
library("sp")
library("spatstat")
library("maptools")
library("raster")
library("tmap")
library("GISTools")
library("spdep")
library("dplyr")
library("spgwr")
#Set working directory
dir <- "E:/418/Final_Project/Working"
setwd(dir)
getwd()

#Reading in particulate matter dataset
pm25 <- read.csv("PM25.csv") #Read in PM2.5 data
#Select only columns 1 and 2
pm25 <- pm25[,1:2]
#Change the column names 
colnames(pm25) <- c("POSTALCODE", "PM25")
pm25 <- na.omit(pm25)

#Reading in postal code shapefile
postalcodes <- shapefile("BC_Postal_Codes") #Read in related postal code data

#Reading in dissemination tract and income data
income <- read.csv("Income.csv") #Read in census income data  
colnames(income) <- c("DAUID", "Income") #Select only ID and Income columns
census.tracts <- shapefile("BC_DA.shp") #Read in dissemination tract shapefile
income.tracts <- merge(census.tracts,income, by = "DAUID") #Merge income and dissemination data
nrow(income.tracts) #Determine the number of columns in the dataframe
#use this for morans I
income.tracts <- income.tracts[!is.na(income.tracts$Income),]


#Create choropleth map of income
med.income <- income.tracts$Income
shades <- auto.shading(med.income, n=6, cols = brewer.pal(6, 'Oranges'))
choropleth(income.tracts, med.income, shades) #map the data with associated colours
choro.legend(-123.6, 49.2, shades) #add a legend (you might need to change the location)

#Select postal codes that fall within dissemination tracts)
postalcodes <- raster::intersect(postalcodes,income.tracts)
plot(postalcodes) #See what the data looks like spatially
head(postalcodes) #See what the data looks like in tabular form

#Join PM2.5 data with postal code data
pm25.spatial <- merge(postalcodes,pm25,by = "POSTALCODE")

#Aggregate the PM2.5 values in each DA in order to have a single value per DA. Here we aggregate based on the mean.
pm25.aggregate <- aggregate((as.numeric(pm25.spatial$PM25)/10)~pm25.spatial$DAUID,FUN=max)

#Re-join aggregated data to the income.tracts layer.
colnames(pm25.aggregate) <- c("DAUID", "PM25AGG") #Select only ID and Income columns
income.pm25 <- merge(income.tracts,pm25.aggregate, by = "DAUID") #Merge income and dissemination data

#Re-join aggregated data to the pm25.spatial points layer.
pm25.points.aggregate <- merge(pm25.spatial, pm25.aggregate, by = "DAUID")

#Create a subsample of the datapoints provided in the PM2.5 dataset using the sample n provided on CourseSpaces

sampleSize=350
spSample <- pm25.points.aggregate[sample(1:length(pm25.points.aggregate),sampleSize),]

#Create a grid called grd to use in your interpolation
# Create an empty grid where n is the total number of cells
grd <- as.data.frame(spsample(spSample, "regular", n=5000))
names(grd)       <- c("X", "Y")
coordinates(grd) <- c("X", "Y")
gridded(grd)     <- TRUE  # Create SpatialPixel object
fullgrid(grd)    <- TRUE  # Create SpatialGrid object
proj4string(grd) <- proj4string(spSample)



############LAB3 MORANS###########

map_Income <- tm_shape(income.tracts) + 
  tm_polygons(col = "Income", 
              title = "Median Income", 
              style = "jenks", 
              palette = "Oranges", n = 6)

income.tracts.nb <- poly2nb(income.tracts)

income.tracts.net <- nb2lines(income.tracts.nb,coords=coordinates(income.tracts))


weights_income <- tm_shape(income.tracts) + tm_borders(col='black') + 
  tm_shape(income.tracts.net) + tm_lines(col='red')
weights_income

income.tracts.nb2 <- poly2nb(income.tracts, queen = FALSE)
income.tracts.net2 <- nb2lines(income.tracts.nb2,coords=coordinates(income.tracts))
tm_shape(income.tracts) + tm_borders(col='black') +
  tm_shape(income.tracts.net2) + tm_lines(col='red')

rookandqueen_income <- tm_shape(income.tracts) + tm_borders(col='black') + 
  tm_shape(income.tracts.net) + tm_lines(col='blue', lwd = 2) +
  tm_shape(income.tracts.net2) + tm_lines(col='red', lwd = 2)


income.tracts.lw <- nb2listw(income.tracts.nb, zero.policy = TRUE, style = "W")
print.listw(income.tracts.lw, zero.policy = TRUE)

income.tracts$IncLagMeans = lag.listw(income.tracts.lw, income.tracts$Income, zero.policy = TRUE)

map_LagMean_Income <- tm_shape(income.tracts) + 
  tm_polygons(col = "IncLagMeans", 
              title = "Median Income\nLagged Means", 
              style = "fisher", 
              palette = "viridis", n = 6) 
map_LagMean_Income

mi <- moran.test(income.tracts$Income, income.tracts.lw, zero.policy = TRUE)
moran.range <- function(lw) {
  wmat <- listw2mat(lw)
  return(range(eigen((wmat + t(wmat))/2)$values))
}
moran.range(income.tracts.lw)
mi

mI <- mi$estimate[[1]]
eI <- mi$estimate[[2]]
var <- mi$estimate[[3]]
eI

z <- (mI - eI) / (sqrt(var))

lisa.test <- localmoran(income.tracts$Income, income.tracts.lw)
lisa.test

income.tracts$Ii <- lisa.test[,1]
income.tracts$E.Ii<- lisa.test[,2]
income.tracts$Var.Ii<- lisa.test[,3]
income.tracts$Z.Ii<- lisa.test[,4]
income.tracts$P<- lisa.test[,5]

map_LISA <- tm_shape(income.tracts) + 
  tm_polygons(col = "Ii", 
              title = "Local Moran's I", 
              style = "fisher", 
              palette = "viridis", n = 6) 
map_LISA

moran_plot_Income <- moran.plot(income.tracts$Income, income.tracts.lw, zero.policy=NULL, spChk=NULL, labels=NULL, xlab="Income", ylab="Spatially Lagged Income", quiet=NULL)
help(moran.plot)




P.idw <- gstat::idw(PM25AGG ~ 1, spSample, newdata=grd, idp=4.0)
r       <- raster(P.idw)
r.m     <- mask(r, income.tracts)

tm_shape(r.m) + 
  tm_raster(n=10,palette = "-RdBu",
            title="Predicted PM2.5 \n(in ppm)") + 
  tm_shape(spSample) + tm_dots(size=0.2) +
  tm_legend(legend.outside=TRUE)


IDW.out <- vector(length = length(spSample))
for (i in 1:length(spSample)) {
  IDW.out[i] <- gstat::idw(PM25AGG ~ 1, spSample[-i,], spSample[i,], idp=3)$var1.pred
}

OP <- par(pty="s", mar=c(4,3,0,0))
plot(IDW.out ~ spSample$PM25AGG, asp=1, xlab="Observed", ylab="Predicted", pch=16,
     col=rgb(0,0,0,0.5))
abline(lm(IDW.out ~ spSample$PM25AGG), col="red", lw=2,lty=2)
abline(0,1)
par(OP)
sqrt( sum((IDW.out - spSample$PM25AGG)^2) / length(spSample))

img <- gstat::idw(PM25AGG~1, spSample, newdata=grd, idp=3.0)
n   <- length(spSample)
Zi  <- matrix(nrow = length(img$var1.pred), ncol = n)

st <- stack()
for (i in 1:n){
  Z1 <- gstat::idw(PM25AGG~1, spSample[-i,], newdata=grd, idp=3.0)
  st <- addLayer(st,raster(Z1,layer=1))
  # Calculated pseudo-value Z at j
  Zi[,i] <- n * img$var1.pred - (n-1) * Z1$var1.pred
}

Zj <- as.matrix(apply(Zi, 1, sum, na.rm=T) / n )

# Compute (Zi* - Zj)^2
c1 <- apply(Zi,2,'-',Zj)            # Compute the difference
c1 <- apply(c1^2, 1, sum, na.rm=T ) # Sum the square of the difference

# Compute the confidence interval
CI <- sqrt( 1/(n*(n-1)) * c1)

# Create (CI / interpolated value) raster
img.sig   <- img
img.sig$v <- CI /img$var1.pred 

tm_shape(r.m) + tm_raster(n=7,title="95% confidence interval \n(in ppm)") +
  tm_shape(spSample) + tm_dots(size=0.2) +
  tm_legend(legend.outside=TRUE)

######Linear Regression##########
#Let's say your dataset with both PM2.5 and Income are stored in a dataset called pm.income.poly.

#Plot income and PM2.5 from the pm.income.poly dataset you created
plot(income.pm25$Income~income.pm25$PM25AGG)
#Notice that there are a lot of 0's in this dataset. If you decide to remove them, use the following line:
income.pm25 <- income.pm25[!is.na(income.pm25$PM25AGG), ]
income.pm25 <- income.pm25[!is.na(income.pm25$Income), ]
#Now plot the data again
plot(income.pm25$Income~income.pm25$PM25AGG)

#Perform a linear regression on the two variables. You should decide which one is dependent.
lm.model <- lm(income.pm25$Income~income.pm25$PM25AGG)
#Add the regression model to the plot you created
abline(lm.model)
#Get the summary of the results
summary(lm.model)

#You want to determine if the model residuals are spatially clustered. 
#First obtain the residuals from the model
model.resids <- as.data.frame(residuals.lm(lm.model))
#Then add the residuals to your spatialpolygon dataframe
income.pm25$residuals <- residuals.lm(lm.model)
#Observe the result to make sure it looks correct
head(income.pm25)

#Now, create choropleth map of residuals
resids <- income.pm25$residuals
shades <- auto.shading(resids, n=6, cols = brewer.pal(6, 'Greens'))
choropleth(income.tracts, resids, shades) #map the data with associated colours
choro.legend(-123.6, 49.2, shades, title = "Residuals") #add a legend (you might need to change the location)



#GLOBAL MORANS I
income.pm25.nb <- poly2nb(income.pm25)
#create neighbour matirx
income.pm25.net <- nb2lines(income.pm25.nb,coords=coordinates(income.pm25))
#Convert Neighbour matrix into lines to plot

weights_income_pm25 <- tm_shape(income.pm25) + tm_borders(col='black') + 
  tm_shape(income.pm25.net) + tm_lines(col='red')
weights_income_pm25

income.pm25.nb2 <- poly2nb(income.pm25, queen = FALSE)
income.pm25.net2 <- nb2lines(income.pm25.nb2,coords=coordinates(income.pm25))
tm_shape(income.pm25) + tm_borders(col='black') +
  tm_shape(income.pm25.net2) + tm_lines(col='red')

rookandqueen_income.pm25 <- tm_shape(income.pm25) + tm_borders(col='black') + 
  tm_shape(income.pm25.net) + tm_lines(col='blue', lwd = 2) +
  tm_shape(income.pm25.net2) + tm_lines(col='red', lwd = 2)
rookandqueen_income.pm25



income.pm25.lw <- nb2listw(income.pm25.nb, zero.policy = TRUE, style = "W")
print.listw(income.pm25.lw, zero.policy = TRUE)

income.pm25$IncLagMeans = lag.listw(income.pm25.lw, income.pm25$residuals, zero.policy = TRUE)

map_LagMean_Incomepm25 <- tm_shape(income.pm25) + 
  tm_polygons(col = "IncLagMeans", 
              title = "Median Income\nLagged Means", 
              style = "fisher", 
              palette = "viridis", n = 6) 
map_LagMean_Incomepm25

mipm25 <- moran.test(income.pm25$residuals, income.pm25.lw, zero.policy = TRUE)
moran.range <- function(lw) {
  wmat <- listw2mat(lw)
  return(range(eigen((wmat + t(wmat))/2)$values))
}
moran.range(income.pm25.lw)
#GLOBAL

mipm25

mI.pm25 <- mipm25$estimate[[1]]
eI.pm25 <- mipm25$estimate[[2]]
var.pm25 <- mipm25$estimate[[3]]

z.pm25 <- (mI.pm25 - eI.pm25) / (sqrt(var))

lisa.test.pm25 <- localmoran(income.pm25$residuals, income.pm25.lw)
lisa.test.pm25


income.pm25$Ii <- lisa.test.pm25[,1]
income.pm25$E.Ii<- lisa.test.pm25[,2]
income.pm25$Var.Ii<- lisa.test.pm25[,3]
income.pm25$Z.Ii<- lisa.test.pm25[,4]
income.pm25$P<- lisa.test.pm25[,5]

map_LISA.pm25 <- tm_shape(income.pm25) + 
  tm_polygons(col = "Ii", 
              title = "Median Income\nLocal Moran's I", 
              style = "fisher", 
              palette = "viridis", n = 6) 
map_LISA.pm25

moran_plot_Income.pm25 <- moran.plot(income.pm25$residuals, income.pm25.lw, zero.policy=NULL, spChk=NULL, labels=NULL, xlab="Population Density", ylab="Spatially Lagged Population Density", quiet=NULL)

#GWR

####Geographically Weighted Regression

#Let's say you are continuing with your data from the regression analysis. 

#The first thing you need to do is to add the polygon coordinates to the spatialpolygondataframe.
#You can obtain the coordinates using the "coordinates" function from the sp library
pm.income.poly.coords <- sp::coordinates(income.pm25)

#Observe the result
head(pm.income.poly.coords)
#Now add the coordinates back to the spatialpolygondataframe
income.pm25$X <- pm.income.poly.coords[,1]
income.pm25$Y <- pm.income.poly.coords[,2]
head(income.pm25)

###Determine the bandwidth for GWR: this will take a while
GWRbandwidth <- gwr.sel(income.pm25$Income~income.pm25$PM25AGG, 
                        data=income.pm25, coords=cbind(income.pm25$X,income.pm25$Y),adapt=T) 

###Perform GWR on the two variables with the bandwidth determined above
###This will take a looooooong while
gwr.model = gwr(income.pm25$Income~income.pm25$PM25AGG, 
                data=income.pm25, coords=cbind(income.pm25$X,income.pm25$Y), 
                adapt=GWRbandwidth, hatmatrix=TRUE, se.fit=TRUE) 

#Print the results of the model
gwr.model

 #Look at the results in detail
results<-as.data.frame(gwr.model$SDF)
head(results)

#Now for the magic. Let's add our local r-square values to the map
income.pm25$localr <- results$localR2

#Create choropleth map of r-square values
local.r.square <- income.pm25$localr
shades <- auto.shading(local.r.square, n=6, cols = brewer.pal(6, 'Oranges'))
choropleth(income.tracts, local.r.square, shades) #map the data with associated colours
choro.legend(-123.6, 49.2, shades, title = "Local R") #add a legend (you might need to change the location)

#Time for more magic. Let's map the coefficients
income.pm25$coeff <- results$income.pm25.PM25AGG

#Create choropleth map of the coefficients
local.coefficient <- income.pm25$coeff
shades <- auto.shading(local.coefficient, n=6, cols = brewer.pal(6, 'Oranges'))
choropleth(income.pm25, local.coefficient, shades) #map the data with associated colours
choro.legend(-123.6, 49.2, shades, title = "Coefficients") #add a legend (you might need to change the location)

#Nearest Neighbor
spSampleMeters <- spTransform(spSample, CRS("+init=epsg:3005"), "+units=m")
Transformcensus <- spTransform(income.tracts, CRS("+init=epsg:3005"))

#create an "extent" object which can be used to create the observation window for spatstat
kma.ext <- as.matrix(extent(spSampleMeters)) 

window <- as.owin(list(xrange = kma.ext[1,], yrange = kma.ext[2,]))

kma.ppp <- ppp(x = spSampleMeters$X, y = spSampleMeters$Y, window = window)


#POINT PATTERN ANALYSIS
nearestNeighbour <- nndist(kma.ppp)
kma.ppp=as.numeric(unlist(kma.ppp))

kma.ppp=as.data.frame(as.numeric(kma.ppp))

kma.ppp <- kma.ppp[!is.na(kma.ppp), ]

n <- 350

nnd = (sum(kma.ppp) / n)

studyArea <- gArea(spgeom = Transformcensus, byid = FALSE)
census.tracts

pointDensity <- (n / studyArea)
r.nnd = 1/(2 * sqrt(pointDensity))
d.nnd = 1.07453 / sqrt(pointDensity)
R = nnd/ r.nnd
SE.NND <- .26136/ sqrt(n * pointDensity)
z = (nnd - r.nnd) / SE.NND
